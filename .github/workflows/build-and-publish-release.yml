name: Build and Publish Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Version. Please DO NOT include the 'v' prefix"
        required: true

concurrency:
  group: build-opencost
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish-opencost:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Show Input Values
        run: |
          echo "release version: ${{ inputs.release_version }}"

      - name: Make Branch Name
        id: branch
        run: |
          VERSION_NUMBER=${{ inputs.release_version }}
          echo "BRANCH_NAME=v${VERSION_NUMBER%.*}" >> $GITHUB_ENV
  
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: 'opencost/opencost'
          ref: '${{ steps.branch.outputs.BRANCH_NAME }}'
          path: ./opencost  

      - name: Set SHA
        id: sha
        run: |
          pushd ./opencost
          echo "OC_SHORTHASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          popd
      
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set OpenCost Image Tags
        id: tags
        run: |
          echo "IMAGE_TAG=ghcr.io/opencost/opencost/opencost:${{ steps.sha.outputs.OC_SHORTHASH }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_LATEST=ghcr.io/opencost/opencost/opencost:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_VERSION=ghcr.io/opencost/opencost/opencost:${{ inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_UI=ghcr.io/opencost/opencost/opencost-ui:${{ steps.sha.outputs.OC_SHORTHASH }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_UI_LATEST=ghcr.io/opencost/opencost/opencost-ui:latest" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG_UI_VERSION=ghcr.io/opencost/opencost/opencost-ui:${{ inputs.release_version }}" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_QUAY=quay.io/kubecost1/kubecost-cost-model:${{ steps.sha.outputs.OC_SHORTHASH }}" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_LATEST_QUAY=quay.io/kubecost1/kubecost-cost-model:latest" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_VERSION_QUAY=quay.io/kubecost1/kubecost-cost-model:prod-${{ inputs.release_version }}" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_UI_QUAY=quay.io/kubecost1/opencost-ui:${{ steps.sha.outputs.OC_SHORTHASH }}" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_UI_LATEST_QUAY=quay.io/kubecost1/opencost-ui:latest" >> $GITHUB_OUTPUT
        #  echo "IMAGE_TAG_UI_VERSION_QUAY=quay.io/kubecost1/opencost-ui:prod-${{ inputs.release_version }}" >> $GITHUB_OUTPUT
     
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up just
        uses: extractions/setup-just@v1
      
      - name: Install crane
        uses: imjasonh/setup-crane@v0.1

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      ## Install manifest-tool, which is required to combine multi-arch images
      ## https://github.com/estesp/manifest-tool
      - name: Install manifest-tool
        run: |
          mkdir -p manifest-tool
          pushd manifest-tool
          wget -q https://github.com/estesp/manifest-tool/releases/download/v2.0.8/binaries-manifest-tool-2.0.8.tar.gz
          tar -xzf binaries-manifest-tool-2.0.8.tar.gz
          cp manifest-tool-linux-amd64 manifest-tool
          echo "$(pwd)" >> $GITHUB_PATH

#      - name: Login to Quay
#        uses: docker/login-action@v3
#        with:
#          registry: quay.io
#          username: ${{ secrets.QUAY_USERNAME }}
#          password: ${{ secrets.QUAY_PASSWORD }}
      
      - name: Build and push (multiarch) OpenCost
        working-directory: ./opencost
        run: |
          just build '${{steps.tags.outputs.IMAGE_TAG}}' ${{ inputs.release_version }}
          crane copy '${{steps.tags.outputs.IMAGE_TAG}}' '${{steps.tags.outputs.IMAGE_TAG_LATEST}}'
          crane copy '${{steps.tags.outputs.IMAGE_TAG}}' '${{steps.tags.outputs.IMAGE_TAG_VERSION}}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG}' '${steps.tags.outputs.IMAGE_TAG_QUAY}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG}' '${steps.tags.outputs.IMAGE_TAG_LATEST_QUAY}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG}' '${steps.tags.outputs.IMAGE_TAG_VERSION_QUAY}'

      - name: Build and push (multiarch) OpenCost UI
        working-directory: ./opencost/ui
        run: |
          just build '${{steps.tags.outputs.IMAGE_TAG_UI}}' ${{ inputs.release_version }}
          crane copy '${{steps.tags.outputs.IMAGE_TAG_UI}}' '${{steps.tags.outputs.IMAGE_TAG_UI_LATEST}}'
          crane copy '${{steps.tags.outputs.IMAGE_TAG_UI}}' '${{steps.tags.outputs.IMAGE_TAG_UI_VERSION}}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG_UI}' '${steps.tags.outputs.IMAGE_TAG_UI_QUAY}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG_UI}' '${steps.tags.outputs.IMAGE_TAG_UI_LATEST_QUAY}'
        #  crane copy '${steps.tags.outputs.IMAGE_TAG_UI}' '${steps.tags.outputs.IMAGE_TAG_UI_VERSION_QUAY}'
